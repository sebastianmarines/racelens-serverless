AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Racelens Serverless

Parameters:
  Stage:
    Type: String
    Default: dev
  RekognitionCollectionName:
    Type: String
    Default: racelens_dev
  BucketName:
    Type: String
    Default: racelens-images-dev
  ImagesDynamoDBTableName:
    Type: String
    Default: racelens_dev
  DomainName:
    Type: String
    Default: racelens.ml
  HostedZoneId:
    Type: String

Globals:
  Function:
    Timeout: 3
    Runtime: python3.9
    Architectures:
      - x86_64
    CodeUri: lambda/
    Environment:
      Variables:
        COLLECTION_NAME: !Ref RekognitionCollectionName
        DYNAMODB_TABLE_NAME: !Ref ImagesDynamoDBTableName
        BUCKET_NAME: !Ref BucketName

Resources:
  RestApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      Cors: "'*'"
      BinaryMediaTypes: ["*~1*"]
      Domain:
        DomainName: !Sub "api-dev.${DomainName}"
        CertificateArn: !Ref DomainCertificate
        Route53:
          HostedZoneId: !Ref HostedZoneId

  IndexFaces:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.index_faces
      MemorySize: 128
      Policies:
        - AmazonS3FullAccess
        - AmazonRekognitionFullAccess
        - AmazonDynamoDBFullAccess
      Events:
        IndexFacesEvent:
          Type: S3
          Properties:
            Bucket: !Ref ImagesBucket
            Events: s3:ObjectCreated:*
  FindFaces:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.find_faces
      MemorySize: 512 # TODO: #3 Check if it works with 128
      Policies:
        - AmazonS3FullAccess
        - AmazonRekognitionFullAccess
        - AmazonDynamoDBFullAccess
      Timeout: 5
      Events:
        Find:
          Type: Api
          Properties:
            RestApiId: !Ref RestApiGateway
            Path: /{event_name}/find
            Method: post

  GenerateUploadURL:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.generate_upload_url
      MemorySize: 128
      Policies:
        - AmazonS3FullAccess
        - AmazonRekognitionFullAccess
        - AmazonDynamoDBFullAccess
      Events:
        GenerateUploadURL:
          Type: Api
          Properties:
            RestApiId: !Ref RestApiGateway
            Path: /{event_name}/generate_upload_url
            Method: get

  RekognitionCollection:
    Type: AWS::Rekognition::Collection
    Properties:
      CollectionId: !Ref RekognitionCollectionName

  ImagesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
  ImagesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ImagesBucket
      PolicyDocument:
        Id: OAIReadPolicy
        Version: 2012-10-17
        Statement:
          - Sid: OAIReadForGetBucketObjects
            Effect: Allow
            Principal:
              CanonicalUser: !GetAtt ImagesOAI.S3CanonicalUserId
            Action: "s3:GetObject"
            Resource: !Sub arn:aws:s3:::${ImagesBucket}/*
  ImagesDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Aliases:
          - !Sub "images-dev.${DomainName}"
        PriceClass: PriceClass_100
        DefaultCacheBehavior:
          TargetOriginId: "S3Origin"
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - HEAD
            - GET
            - OPTIONS
          DefaultTTL: 86400
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        ViewerCertificate:
          AcmCertificateArn: !Ref DomainCertificate
          SslSupportMethod: sni-only
        Origins:
          - DomainName: !Sub "${BucketName}.s3.amazonaws.com"
            Id: "S3Origin"
            S3OriginConfig:
              OriginAccessIdentity: !Join
                - ""
                - - "origin-access-identity/cloudfront/"
                  - !Ref ImagesOAI
  ImagesOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Racelens images
  ImagesDistributionRecord:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref HostedZoneId
      RecordSets:
        - Name: !Sub "images-dev.${DomainName}"
          Type: A
          AliasTarget:
            DNSName: !GetAtt ImagesDistribution.DomainName
            HostedZoneId: !Sub "Z2FDTNDATAQYW2"

  ImagesDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: event_id
          AttributeType: S
        - AttributeName: image_id
          AttributeType: S
      KeySchema:
        - AttributeName: event_id
          KeyType: HASH
        - AttributeName: image_id
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: !Ref ImagesDynamoDBTableName

  DomainCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub "*.${DomainName}"
      DomainValidationOptions:
        - DomainName: !Sub "*.${DomainName}"
          HostedZoneId: !Ref HostedZoneId
      ValidationMethod: DNS

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UsernameConfiguration:
        CaseSensitive: true
      UserPoolName: !Sub "racelens-${Stage}"
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
          NumberAttributeConstraints:
            MinValue: 1
            MaxValue: 255
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
          NumberAttributeConstraints:
            MinValue: 1
            MaxValue: 255
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        - http://localhost:3000
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - phone
        - email
        - openid
        - profile
      SupportedIdentityProviders:
        - COGNITO

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub "racelens-${Stage}"
      UserPoolId: !Ref UserPool

Outputs:
  CognitoUserPoolID:
    Value: !Ref UserPool
    Description: The UserPool ID
  CognitoAppClientID:
    Value: !Ref UserPoolClient
    Description: The app client
  HostedUIURL:
    Value: !Sub https://racelens-${Stage}.auth.us-west-2.amazoncognito.com/login?client_id=${UserPoolClient}&response_type=code&scope=email+openid+phone+profile&redirect_uri=http://localhost:3000
    Description: The hosted UI URL
